import os
import json
import sys
import shutil


def move_symbolic_links(file_list, src_folder, dest_folder):
    """
    Move existing symlinks for each file in file_list from src_folder -> dest_folder.
    Overwrites any existing links.

    If any of the files in file_list are NOT symlinks, this will still rename them.
    Ensure your workflow expects that.
    """
    os.makedirs(dest_folder, exist_ok=True)

    for f in file_list:
        old_path = os.path.join(src_folder, f)
        new_path = os.path.join(dest_folder, f)

        # If something is already at the new_path, remove it
        if os.path.exists(new_path):
            os.remove(new_path)

        # Move (rename) the file/link
        # os.rename() suffices for moving within the same filesystem;
        # if you need to move across filesystems, you might use shutil.move().
        os.rename(old_path, new_path)


def apply_holdout_yolo(
    splits_info_path: str,
    input_root: str,
    output_root: str,
    yaml_filename: str = "dataset.yaml",
):
    """
    Read an existing splits_info.json (generated by holdout()), then move
    symlinks in input_root/images and input_root/labels into YOLO-friendly
    subfolders in output_root, e.g.:

        output_root/
            images/
                train/
                val/
                test/
            labels/
                train/
                val/
                test/
            dataset.yaml

    We assume that:
      - The images in `input_root/images` are already symlinks (or files) that need reorganizing.
      - The labels in `input_root/labels` are likewise symlinks or files.
      - Filenames match except for extensions .png / .txt, etc.
      - The splits_info.json structure is:
          {
            "train": {
              "cadica": ["cadica_p26", "cadica_p27", ...],
              "kemerovo": [...]
            },
            "val": {...},
            "test": {...}
          }

    :param splits_info_path: Path to the JSON file produced by holdout(...).
    :param input_root: Root folder containing images/ and labels/ subfolders (already symlinked or preprocessed).
    :param output_root: Where to place the final YOLO subfolders (images/train, images/val, etc.).
    :param yaml_filename: Optional name for the YOLO dataset YAML file.
    """

    # 1) Read the splits_info
    if not os.path.isfile(splits_info_path):
        print(f"Error: splits_info_path does not exist: {splits_info_path}")
        sys.exit(1)

    with open(splits_info_path, "r") as f:
        splits_info = json.load(f)

    # 2) Basic validations
    if not isinstance(splits_info, dict) or len(splits_info) < 1:
        print("Error: splits_info JSON seems invalid.")
        sys.exit(1)

    # 3) Prepare output directories
    out_images_root = os.path.join(output_root, "images")
    out_labels_root = os.path.join(output_root, "labels")
    os.makedirs(out_images_root, exist_ok=True)
    os.makedirs(out_labels_root, exist_ok=True)

    in_images = os.path.join(input_root, "images")
    in_labels = os.path.join(input_root, "labels")

    if not os.path.isdir(in_images) or not os.path.isdir(in_labels):
        print(
            "Error: input_root must contain 'images' and 'labels' subfolders in YOLO format."
        )
        sys.exit(1)

    # 4) For each split (train, val, test), move symlinks from input_root into the new subfolders
    for split_name, dataset_dict in splits_info.items():
        split_img_out = os.path.join(out_images_root, split_name)
        split_lbl_out = os.path.join(out_labels_root, split_name)
        os.makedirs(split_img_out, exist_ok=True)
        os.makedirs(split_lbl_out, exist_ok=True)

        for _, patients_list in dataset_dict.items():
            for patient_key in patients_list:
                # For each image file that starts with e.g. "cadica_p26_"
                for f in os.listdir(in_images):
                    if f.startswith(patient_key + "_"):  # type: ignore
                        image_src = os.path.join(in_images, f)  # type: ignore
                        if os.path.isfile(image_src):
                            # Move this symlink / file into the split_img_out
                            move_symbolic_links([f], in_images, split_img_out)

                            # For YOLO labels, same base name + ".txt"
                            base_name, _ = os.path.splitext(f)  # type: ignore
                            label_file = base_name + ".txt"
                            label_src = os.path.join(in_labels, label_file)
                            if os.path.isfile(label_src):
                                move_symbolic_links(
                                    [label_file], in_labels, split_lbl_out
                                )

        print(
            f"Moved YOLO split '{split_name}' symlinks to {split_img_out} and {split_lbl_out}"
        )

    # 5) Generate a YOLO dataset.yaml file
    yaml_lines = []
    out_root_abs = os.path.abspath(output_root)
    yaml_lines.append(f"path: {out_root_abs}")
    for split_name in splits_info.keys():
        yaml_lines.append(f"{split_name}: images/{split_name}")
    # Example class names
    yaml_lines.append("names:")
    yaml_lines.append("    0: stenosis")

    yaml_content = "\n".join(yaml_lines)
    yaml_path = os.path.join(output_root, yaml_filename)
    with open(yaml_path, "w") as f:
        f.write(yaml_content)

    print(f"YOLO dataset.yaml saved to {yaml_path}")


if __name__ == "__main__":
    # Example usage
    splits_info_json = "splits_info.json"  # Produced by holdout(...)
    input_root = "/media/hddb/mario/data/COMBINED/ICA_DETECTION"
    output_root = "/media/hddb/mario/data/COMBINED/YOLO_ICA_DETECTION"
    apply_holdout_yolo(
        splits_info_json,
        input_root,
        output_root,
        yaml_filename="yolo_ica_detection.yaml",
    )

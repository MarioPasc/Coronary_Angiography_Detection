"""
Visual analytics for SHAP hyper-parameter importance.

Produces three figures in <out>/plots/ :

    1. heatmap_global.pdf
       • Rows  : 11 tuned hyper-parameters
       • Cols  : yolo_s … dca_yolo_l   (6 models)
       • Colour: global importance (%) – LightGBM Tree-SHAP

    2. bar_top5_<family>.pdf   (two files: yolo, dca_yolo)
       • For each architecture, a horizontal bar chart of the *top-5*
         hyper-parameters averaged across sizes.  Error bars show min–max
         range across s/m/l.

    3. radar_<optimiser>.pdf   (five files)
       • “Fingerprint” of each hyper-parameter optimiser.  Importance
         computed from the per-trial SHAP values (requires the saved
         <family>_<size>_shap.npy + X.parquet files).

Author : Mario’s ChatGPT assistant
Date   : 2025-06-04
"""

from __future__ import annotations

import logging
from pathlib import Path
from typing import Dict, List

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

from .constants import HP_COLS, MODEL_SIZES

LOGGER = logging.getLogger(__name__)


# ────────────────────────────────────────────────────────────────────────────
# Public façade
# ────────────────────────────────────────────────────────────────────────────

def make_all_plots(artifacts_dir: Path, out_dir: Path, fmt: str = "pdf") -> None:
    """
    Generate all visualisations from previously saved artefacts.

    Parameters
    ----------
    artifacts_dir
        Folder that contains *global_importance.parquet* +
        *_shap.npy / *_X.parquet generated by `model_training.py`.
    out_dir
        Destination folder for the figures.
    fmt
        Graphics format accepted by Matplotlib ('pdf', 'png', ...).
    """
    out_dir.mkdir(parents=True, exist_ok=True)
    imp_f = artifacts_dir / "global_importance.parquet"
    if not imp_f.exists():
        raise FileNotFoundError(f"{imp_f} not found – run model_training first")

    df_imp = pd.read_parquet(imp_f)

    _plot_global_heatmap(df_imp, out_dir / f"heatmap_global.{fmt}")
    _plot_top5_bars(df_imp, out_dir, fmt)

    # Radar charts require per-optimiser importance  → derive on the fly
    _plot_optimizer_radars(artifacts_dir, out_dir, fmt)

    LOGGER.info("All plots written to %s", out_dir)


# ────────────────────────────────────────────────────────────────────────────
# 1. Heat-map – global importance (family × size)
# ────────────────────────────────────────────────────────────────────────────

def _plot_global_heatmap(df_imp: pd.DataFrame, fig_path: Path) -> None:
    pivot = (
        df_imp
        .assign(col=lambda d: d["model_family"] + "_" + d["size"])
        .pivot(index="hyperparameter", columns="col", values="importance")
        .loc[HP_COLS]                         # keep canonical order
        .reindex(columns=[
            "yolo_s", "yolo_m", "yolo_l",
            "dca_yolo_s", "dca_yolo_m", "dca_yolo_l"
        ])
    )
    plt.figure(figsize=(7.2, 4.4))
    sns.heatmap(pivot * 100, annot=True, fmt=".1f", cmap="viridis",
                cbar_kws={"label": "Importance (%)"})
    plt.ylabel("")
    plt.xlabel("")
    plt.tight_layout()
    plt.savefig(fig_path)
    plt.close()
    LOGGER.info("Saved %s", fig_path.name)


# ────────────────────────────────────────────────────────────────────────────
# 2. Horizontal bar – top-5 hyper-parameters per architecture
# ────────────────────────────────────────────────────────────────────────────

def _plot_top5_bars(df_imp: pd.DataFrame, out_dir: Path, fmt: str) -> None:
    for fam in ("yolo", "dca_yolo"):
        fam_df = (
            df_imp[df_imp["model_family"] == fam]
            .groupby(["hyperparameter"])["importance"]
            .agg(["mean", "min", "max"])
            .sort_values("mean", ascending=False)
            .head(5)
        )

        fig, ax = plt.subplots(figsize=(4, 2.8))
        ax.barh(
            fam_df.index,
            fam_df["mean"] * 100,
            xerr=[(fam_df["mean"] - fam_df["min"]) * 100,
                  (fam_df["max"] - fam_df["mean"]) * 100],
            color="#4C72B0" if fam == "yolo" else "#55A868",
            alpha=0.9,
            edgecolor="black",
        )
        ax.invert_yaxis()
        ax.set_xlabel("Avg. importance across sizes (%)")
        ax.set_title(f"{fam.upper()} – top-5 hyper-parameters")
        plt.tight_layout()
        f = out_dir / f"bar_top5_{fam}.{fmt}"
        fig.savefig(f)
        plt.close(fig)
        LOGGER.info("Saved %s", f.name)


# ────────────────────────────────────────────────────────────────────────────
# 3. Radar “fingerprint” per optimiser
# ────────────────────────────────────────────────────────────────────────────

def _plot_optimizer_radars(artifacts_dir: Path, out_dir: Path, fmt: str) -> None:
    # Build importance per optimiser from SHAP arrays
    records: List[Dict[str, float | str]] = []

    for fam in ("yolo", "dca_yolo"):
        for size in MODEL_SIZES:
            X_f = artifacts_dir / f"{fam}_{size}_X.parquet"
            shp_f = artifacts_dir / f"{fam}_{size}_shap.npy"
            if not (X_f.exists() and shp_f.exists()):
                LOGGER.debug("Missing artefacts for %s-%s", fam, size)
                continue

            X = pd.read_parquet(X_f)
            shp = np.load(shp_f)

            # optimiser column lives in the *full* dataset, not X.
            # Load the column separately
            optimiser = pd.read_parquet(X_f.parent / "shap_dataset.parquet") \
                          .query("model_family == @fam and size == @size")["optimiser"] \
                          .reset_index(drop=True)

            # align shapes
            if len(optimiser) != shp.shape[0]:
                optimiser = optimiser.iloc[:shp.shape[0]]

            for opt in optimiser.unique():
                rows = optimiser == opt
                imp = np.abs(shp[rows]).mean(axis=0)
                imp /= imp.sum()
                for hp, val in zip(HP_COLS, imp):
                    records.append({
                        "optimiser": opt,
                        "hyperparameter": hp,
                        "importance": float(val),
                    })

    df_opt = pd.DataFrame(records)
    for opt, sub in df_opt.groupby("optimiser"):
        _radar_single(sub, out_dir / f"radar_{opt}.{fmt}")


def _radar_single(df: pd.DataFrame, fig_path: Path) -> None:
    # Ensure order of axes
    df = df.set_index("hyperparameter").loc[HP_COLS]
    values = (df["importance"] * 100).values
    angles = np.linspace(0, 2 * np.pi, len(values) + 1)
    values = np.append(values, values[0])   # close loop

    fig = plt.figure(figsize=(4, 4))
    ax = fig.add_subplot(111, polar=True)
    ax.plot(angles, values, linewidth=1.3, linestyle='-', marker='o')
    ax.fill(angles, values, alpha=0.25)
    #ax.set_thetagrids(angles[:-1] * 180 / np.pi, labels=HP_COLS, fontsize=8)
    ax.set_title(f"Importance fingerprint – {fig_path.stem.split('_',1)[1]}")
    ax.set_ylim(0, max(10, values.max() * 1.1))
    plt.tight_layout()
    fig.savefig(fig_path)
    plt.close(fig)
    LOGGER.info("Saved %s", fig_path.name)
